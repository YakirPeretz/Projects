//
// Module my_project_lib.calc_alpha_k.struct
//
// Created:
//          by - nofar.UNKNOWN (DESKTOP-6H8PMMN)
//          at - 22:01:17 19/11/2020
//
// Generated by Mentor Graphics' HDL Designer(TM) 2018.2 (Build 19)
//

`resetall
`timescale 1ns/10ps
module calc_alpha_k( 
   // Port Declarations
   input   wire    [6:0]   alpha_max, 
   input   wire    [6:0]   alpha_min, 
   input   wire    [13:0]  sigma_k,
   output   reg    [6:0]  AlphakOut,
   output  reg AlphaReady,
   input    wire start_calc_alpha

);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg  [10:0] dividend;
reg  [6:0]  dout2;
reg  [6:0]  dout3;
reg  [10:0] res;
reg  [13:0] AlphaTemp;

// Instances 
//divider U_8( 
//   .dividend (dividend), 
//   .res      (res), 
//   .sigma_k  (sigma_k)
//); 

always @(start_calc_alpha)
begin :ready_proc
  if (start_calc_alpha)
  begin  
    if(sigma_k<=9200) //sigma_k!=0;
    begin
     AlphakOut=alpha_max;
     res=0;
     dout2=92;
     dividend=0;
     AlphaTemp=1;
     {dout3}= alpha_max - alpha_min;
   end
    else //sigma_k!=0;
    begin
// ModuleWare code(v1.12) for instance 'U_0' of 'sub'
 {dout3}= alpha_max - alpha_min;

  // ModuleWare code(v1.12) for instance 'U_7' of 'constval'
 dout2 = 92;// 2^(-(mu_k-0.5)^2) -> 8% max error
 
 // ModuleWare code(v1.12) for instance 'U_6' of 'mult'
 dividend = dout3 * dout2;
 
 res = (dividend*100)/sigma_k;

// ModuleWare code(v1.12) for instance 'U_1' of 'add'
 AlphaTemp = alpha_min + res;
 
      if (AlphaTemp[13:7]==0)
      AlphakOut=AlphaTemp[6:0];
      else
      AlphakOut=alpha_max;
    end

  AlphaReady=1;
  end
  else
  begin
  AlphaReady=0;
  AlphakOut=0;
  dividend=0;
  dout3=0;
  res=0;
  AlphaTemp=0;
  end
end



endmodule // calc_alpha_k